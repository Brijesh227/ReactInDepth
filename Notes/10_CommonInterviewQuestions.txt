// Supercoder

1. How to optimised react application performance
2. What are the some best practice for securing a app intertaed with third party service like payment integration
3. Compare time complexity of common operations in array and linkedlist in js (access, insert/delete at end, at begining, search) ?
4. How would you implement SSO in react app to enhance  securtiy and user experience?
5. In a scenario where you need to manage complex state transitions in react, how would you implement redux?
6. How would you implement a HOC to add logging functionality to a component's lifecycle methods? 
7. What are key consideration while designing a responsive layout for a web app using css Grid?
8. Explain situation when react context might not be best fitted,why you choose redux?
9. explain the concept of "tree-shaking"?
    What is difference betwen these types of syntax?
    const { useState } = require('react');

    import { useState }  from 'react';
10. How do you use advanced typescript concept like mapped types, conditional types and utility types to enforcing strong typescript in a react?
    provide practical example.

// Turing

1. Context api vs redux
2. performance optimisation technique
3. code spiltting
4. lazy loading, React.lazy and suspense